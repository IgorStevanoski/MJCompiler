
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jan 15 20:00:23 CET 2023
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Sun Jan 15 20:00:23 CET 2023
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\043\010\000\002\002\004\000\002\043" +
    "\007\000\002\042\003\000\002\003\004\000\002\003\002" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\005\005\000\002" +
    "\005\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\006\005\000\002\006\004\000\002\046\003" +
    "\000\002\046\003\000\002\045\003\000\002\044\005\000" +
    "\002\007\005\000\002\007\002\000\002\010\010\000\002" +
    "\040\004\000\002\040\003\000\002\035\005\000\002\011" +
    "\004\000\002\011\002\000\002\055\003\000\002\041\004" +
    "\000\002\041\003\000\002\041\003\000\002\041\002\000" +
    "\002\036\004\000\002\036\003\000\002\037\012\000\002" +
    "\012\004\000\002\012\003\000\002\050\012\000\002\051" +
    "\004\000\002\051\004\000\002\056\003\000\002\013\003" +
    "\000\002\013\002\000\002\014\005\000\002\014\003\000" +
    "\002\015\004\000\002\015\006\000\002\016\004\000\002" +
    "\016\002\000\002\017\003\000\002\017\003\000\002\027" +
    "\007\000\002\027\011\000\002\026\004\000\002\026\011" +
    "\000\002\026\007\000\002\026\004\000\002\026\004\000" +
    "\002\026\005\000\002\026\004\000\002\026\007\000\002" +
    "\026\007\000\002\026\011\000\002\026\005\000\002\026" +
    "\013\000\002\030\003\000\002\030\005\000\002\032\003" +
    "\000\002\032\005\000\002\031\003\000\002\031\005\000" +
    "\002\020\005\000\002\020\006\000\002\020\004\000\002" +
    "\020\004\000\002\020\007\000\002\063\005\000\002\063" +
    "\003\000\002\054\003\000\002\054\002\000\002\052\003" +
    "\000\002\052\005\000\002\052\006\000\002\052\003\000" +
    "\002\053\003\000\002\021\003\000\002\021\002\000\002" +
    "\022\003\000\002\022\005\000\002\062\004\000\002\062" +
    "\003\000\002\062\003\000\002\061\005\000\002\061\003" +
    "\000\002\060\003\000\002\060\005\000\002\057\003\000" +
    "\002\057\006\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\007\000\002\057\007\000\002\057" +
    "\005\000\002\034\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\004\005\001\002\000\004\002\344\001" +
    "\002\000\004\064\006\001\002\000\014\003\ufffe\006\ufffe" +
    "\011\ufffe\053\ufffe\064\ufffe\001\002\000\014\003\ufffc\006" +
    "\ufffc\011\ufffc\053\ufffc\064\ufffc\001\002\000\014\003\017" +
    "\006\022\011\021\053\011\064\012\001\002\000\010\021" +
    "\052\054\342\064\012\001\002\000\012\051\uffe3\053\uffe3" +
    "\055\uffe3\064\uffe3\001\002\000\014\003\ufffd\006\ufffd\011" +
    "\ufffd\053\ufffd\064\ufffd\001\002\000\006\045\337\047\336" +
    "\001\002\000\014\003\ufff9\006\ufff9\011\ufff9\053\ufff9\064" +
    "\ufff9\001\002\000\004\064\037\001\002\000\006\045\334" +
    "\047\333\001\002\000\006\045\332\047\035\001\002\000" +
    "\004\064\012\001\002\000\004\064\023\001\002\000\006" +
    "\022\025\053\uffe4\001\002\000\004\053\027\001\002\000" +
    "\004\064\012\001\002\000\004\053\uffe5\001\002\000\010" +
    "\053\uffea\054\uffea\064\uffea\001\002\000\004\054\322\001" +
    "\002\000\010\053\032\054\uffe7\064\012\001\002\000\010" +
    "\021\052\054\uffdf\064\045\001\002\000\004\054\uffe8\001" +
    "\002\000\006\045\036\047\035\001\002\000\004\064\037" +
    "\001\002\000\010\053\uffeb\054\uffeb\064\uffeb\001\002\000" +
    "\010\045\uffed\047\uffed\055\043\001\002\000\006\045\uffee" +
    "\047\uffee\001\002\000\006\045\ufff1\047\ufff1\001\002\000" +
    "\006\045\uffef\047\uffef\001\002\000\004\056\044\001\002" +
    "\000\006\045\uffec\047\uffec\001\002\000\006\051\313\064" +
    "\uffe3\001\002\000\004\051\065\001\002\000\010\021\uffdd" +
    "\054\uffdd\064\uffdd\001\002\000\004\054\064\001\002\000" +
    "\010\021\052\054\uffe1\064\012\001\002\000\004\064\063" +
    "\001\002\000\010\021\052\054\uffe0\064\045\001\002\000" +
    "\004\064\057\001\002\000\004\064\uffd6\001\002\000\010" +
    "\021\uffda\054\uffda\064\uffda\001\002\000\004\051\uffd8\001" +
    "\002\000\010\021\052\054\uffe2\064\012\001\002\000\010" +
    "\021\uffde\054\uffde\064\uffde\001\002\000\010\021\uffdb\054" +
    "\uffdb\064\uffdb\001\002\000\004\051\uffd7\001\002\000\004" +
    "\054\uffe6\001\002\000\006\052\uffd4\064\012\001\002\000" +
    "\004\052\077\001\002\000\004\064\074\001\002\000\006" +
    "\047\072\052\uffd5\001\002\000\006\047\uffd2\052\uffd2\001" +
    "\002\000\004\064\012\001\002\000\006\047\uffd3\052\uffd3" +
    "\001\002\000\010\047\uffd1\052\uffd1\055\075\001\002\000" +
    "\004\056\076\001\002\000\006\047\uffd0\052\uffd0\001\002" +
    "\000\006\053\uffea\064\uffea\001\002\000\006\053\101\064" +
    "\012\001\002\000\032\005\uffce\012\uffce\014\uffce\016\uffce" +
    "\017\uffce\020\uffce\023\uffce\024\uffce\053\uffce\054\uffce\055" +
    "\uffce\064\uffce\001\002\000\032\005\122\012\112\014\110" +
    "\016\123\017\103\020\111\023\104\024\116\053\114\054" +
    "\107\055\113\064\106\001\002\000\004\051\307\001\002" +
    "\000\004\045\306\001\002\000\032\005\uffcf\012\uffcf\014" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\023\uffcf\024\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\064\uffcf\001\002\000\060\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\055\uffaa" +
    "\056\uffaa\060\uffaa\001\002\000\010\021\uffd9\054\uffd9\064" +
    "\uffd9\001\002\000\004\051\274\001\002\000\026\003\136" +
    "\015\131\024\116\044\126\045\271\051\141\061\130\062" +
    "\127\063\133\064\106\001\002\000\004\051\242\001\002" +
    "\000\012\024\116\047\uffaf\056\uffaf\064\106\001\002\000" +
    "\032\005\uffce\012\uffce\014\uffce\016\uffce\017\uffce\020\uffce" +
    "\023\uffce\024\uffce\053\uffce\054\uffce\055\uffce\064\uffce\001" +
    "\002\000\034\005\uffcd\012\uffcd\014\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\023\uffcd\024\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\064\uffcd\001\002\000\056\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\056\uffab\060\uffab\001" +
    "\002\000\004\045\227\001\002\000\034\005\uffcc\012\uffcc" +
    "\014\uffcc\016\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\064\uffcc\001\002\000\014" +
    "\041\210\043\211\050\214\051\212\060\213\001\002\000" +
    "\004\045\207\001\002\000\004\051\177\001\002\000\060" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\055\125\056\uffae\060\uffae\001\002\000\024\003\136" +
    "\015\131\024\116\044\126\051\141\061\130\062\127\063" +
    "\133\064\106\001\002\000\020\015\131\024\116\051\141" +
    "\061\130\062\127\063\133\064\106\001\002\000\044\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\042\uff9b\044\uff9b\045" +
    "\uff9b\047\uff9b\052\uff9b\056\uff9b\001\002\000\044\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\042\uff9a\044\uff9a\045\uff9a" +
    "\047\uff9a\052\uff9a\056\uff9a\001\002\000\004\064\012\001" +
    "\002\000\036\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\042\164\044\165\045\uffa4\047" +
    "\uffa4\052\uffa4\056\uffa4\001\002\000\044\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\042\uff9c\044\uff9c\045\uff9c\047\uff9c" +
    "\052\uff9c\056\uff9c\001\002\000\044\026\156\027\161\030" +
    "\157\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\042\uffa1\044\uffa1\045\uffa1\047\uffa1\052" +
    "\uffa1\056\uffa1\001\002\000\050\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\042\uff9e\044\uff9e\045\uff9e\047\uff9e\050\146" +
    "\051\145\052\uff9e\056\uff9e\001\002\000\032\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\045\uffa3\047\uffa3\052\uffa3\056\uffa3\001\002\000\044\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\042\uffa0\044\uffa0\045" +
    "\uffa0\047\uffa0\052\uffa0\056\uffa0\001\002\000\004\056\144" +
    "\001\002\000\024\003\136\015\131\024\116\044\126\051" +
    "\141\061\130\062\127\063\133\064\106\001\002\000\004" +
    "\052\143\001\002\000\044\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\042\uff97\044\uff97\045\uff97\047\uff97\052\uff97\056" +
    "\uff97\001\002\000\056\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\056\uffac\060\uffac\001\002\000" +
    "\026\003\136\015\131\024\116\044\126\051\141\052\uffa8" +
    "\061\130\062\127\063\133\064\106\001\002\000\004\064" +
    "\147\001\002\000\056\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\056\uffad\060\uffad\001\002\000" +
    "\004\052\155\001\002\000\006\047\uffa7\052\uffa7\001\002" +
    "\000\006\047\153\052\uffa9\001\002\000\024\003\136\015" +
    "\131\024\116\044\126\051\141\061\130\062\127\063\133" +
    "\064\106\001\002\000\006\047\uffa6\052\uffa6\001\002\000" +
    "\044\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\042\uff9d\044" +
    "\uff9d\045\uff9d\047\uff9d\052\uff9d\056\uff9d\001\002\000\020" +
    "\015\uff8d\024\uff8d\051\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\001\002\000\020\015\uff8b\024\uff8b\051\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\001\002\000\020\015\131\024" +
    "\116\051\141\061\130\062\127\063\133\064\106\001\002" +
    "\000\020\015\uff8c\024\uff8c\051\uff8c\061\uff8c\062\uff8c\063" +
    "\uff8c\064\uff8c\001\002\000\044\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\042\uff9f\044\uff9f\045\uff9f\047\uff9f\052\uff9f" +
    "\056\uff9f\001\002\000\020\015\131\024\116\051\141\061" +
    "\130\062\127\063\133\064\106\001\002\000\020\015\uff8f" +
    "\024\uff8f\051\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\001" +
    "\002\000\020\015\uff8e\024\uff8e\051\uff8e\061\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\001\002\000\044\026\156\027\161\030" +
    "\157\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\042\uffa2\044\uffa2\045\uffa2\047\uffa2\052" +
    "\uffa2\056\uffa2\001\002\000\006\051\170\055\171\001\002" +
    "\000\026\003\136\015\131\024\116\044\126\051\141\052" +
    "\uffa8\061\130\062\127\063\133\064\106\001\002\000\024" +
    "\003\136\015\131\024\116\044\126\051\141\061\130\062" +
    "\127\063\133\064\106\001\002\000\004\056\173\001\002" +
    "\000\044\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\042\uff99" +
    "\044\uff99\045\uff99\047\uff99\052\uff99\056\uff99\001\002\000" +
    "\004\052\175\001\002\000\044\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\042\uff98\044\uff98\045\uff98\047\uff98\052\uff98" +
    "\056\uff98\001\002\000\036\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\164\044\165" +
    "\045\uffa5\047\uffa5\052\uffa5\056\uffa5\001\002\000\024\003" +
    "\136\015\131\024\116\044\126\051\141\061\130\062\127" +
    "\063\133\064\106\001\002\000\006\047\201\052\202\001" +
    "\002\000\004\063\204\001\002\000\004\045\203\001\002" +
    "\000\036\005\uffc1\010\uffc1\012\uffc1\014\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\023\uffc1\024\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\064\uffc1\001\002\000\004\052\205\001\002\000" +
    "\004\045\206\001\002\000\036\005\uffc0\010\uffc0\012\uffc0" +
    "\014\uffc0\016\uffc0\017\uffc0\020\uffc0\023\uffc0\024\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\064\uffc0\001\002\000\036" +
    "\005\uffc6\010\uffc6\012\uffc6\014\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\023\uffc6\024\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\064\uffc6\001\002\000\004\045\uffb5\001\002\000\004\045" +
    "\uffb4\001\002\000\026\003\136\015\131\024\116\044\126" +
    "\051\141\052\uffa8\061\130\062\127\063\133\064\106\001" +
    "\002\000\024\003\136\015\131\024\116\044\126\051\141" +
    "\061\130\062\127\063\133\064\106\001\002\000\006\025" +
    "\215\064\147\001\002\000\004\051\216\001\002\000\004" +
    "\064\217\001\002\000\004\057\220\001\002\000\030\005" +
    "\122\012\112\014\110\016\123\017\103\020\111\023\104" +
    "\024\116\053\114\055\113\064\106\001\002\000\004\052" +
    "\222\001\002\000\004\045\223\001\002\000\036\005\uffbe" +
    "\010\uffbe\012\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe\023" +
    "\uffbe\024\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\064\uffbe" +
    "\001\002\000\004\045\uffb7\001\002\000\004\052\226\001" +
    "\002\000\004\045\uffb6\001\002\000\036\005\uffc9\010\uffc9" +
    "\012\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\023\uffc9\024" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\064\uffc9\001\002" +
    "\000\032\005\122\012\112\014\110\016\123\017\103\020" +
    "\111\023\104\024\116\053\114\054\231\055\113\064\106" +
    "\001\002\000\036\005\uffbf\010\uffbf\012\uffbf\014\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\023\uffbf\024\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\064\uffbf\001\002\000\010\047\uffb0\050" +
    "\146\056\uffb0\001\002\000\006\047\235\056\236\001\002" +
    "\000\006\047\uffb1\056\uffb1\001\002\000\012\024\116\047" +
    "\uffaf\056\uffaf\064\106\001\002\000\004\060\237\001\002" +
    "\000\006\024\116\064\106\001\002\000\006\045\uffb3\050" +
    "\146\001\002\000\006\047\uffb2\056\uffb2\001\002\000\024" +
    "\003\136\015\131\024\116\044\126\051\141\061\130\062" +
    "\127\063\133\064\106\001\002\000\024\031\264\032\265" +
    "\033\261\034\262\035\266\036\267\037\uffb9\040\uffb9\052" +
    "\uffb9\001\002\000\010\037\uffbb\040\uffbb\052\uffbb\001\002" +
    "\000\006\040\252\052\251\001\002\000\010\037\247\040" +
    "\uffbd\052\uffbd\001\002\000\024\003\136\015\131\024\116" +
    "\044\126\051\141\061\130\062\127\063\133\064\106\001" +
    "\002\000\010\037\uffba\040\uffba\052\uffba\001\002\000\030" +
    "\005\122\012\112\014\110\016\123\017\103\020\111\023" +
    "\104\024\116\053\114\055\113\064\106\001\002\000\024" +
    "\003\136\015\131\024\116\044\126\051\141\061\130\062" +
    "\127\063\133\064\106\001\002\000\010\037\247\040\uffbc" +
    "\052\uffbc\001\002\000\036\005\uffcd\010\256\012\uffcd\014" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\023\uffcd\024\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\064\uffcd\001\002\000\034\005" +
    "\uffcb\012\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\023\uffcb" +
    "\024\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\064\uffcb\001" +
    "\002\000\030\005\122\012\112\014\110\016\123\017\103" +
    "\020\111\023\104\024\116\053\114\055\113\064\106\001" +
    "\002\000\034\005\uffca\012\uffca\014\uffca\016\uffca\017\uffca" +
    "\020\uffca\023\uffca\024\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\064\uffca\001\002\000\036\005\uffc8\010\uffc8\012\uffc8" +
    "\014\uffc8\016\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\064\uffc8\001\002\000\024" +
    "\003\uff92\015\uff92\024\uff92\044\uff92\051\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\001\002\000\024\003\uff93\015\uff93" +
    "\024\uff93\044\uff93\051\uff93\061\uff93\062\uff93\063\uff93\064" +
    "\uff93\001\002\000\024\003\136\015\131\024\116\044\126" +
    "\051\141\061\130\062\127\063\133\064\106\001\002\000" +
    "\024\003\uff95\015\uff95\024\uff95\044\uff95\051\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\001\002\000\024\003\uff94\015" +
    "\uff94\024\uff94\044\uff94\051\uff94\061\uff94\062\uff94\063\uff94" +
    "\064\uff94\001\002\000\024\003\uff91\015\uff91\024\uff91\044" +
    "\uff91\051\uff91\061\uff91\062\uff91\063\uff91\064\uff91\001\002" +
    "\000\024\003\uff90\015\uff90\024\uff90\044\uff90\051\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\001\002\000\010\037\uffb8" +
    "\040\uffb8\052\uffb8\001\002\000\036\005\uffc3\010\uffc3\012" +
    "\uffc3\014\uffc3\016\uffc3\017\uffc3\020\uffc3\023\uffc3\024\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\064\uffc3\001\002\000" +
    "\004\045\273\001\002\000\036\005\uffc4\010\uffc4\012\uffc4" +
    "\014\uffc4\016\uffc4\017\uffc4\020\uffc4\023\uffc4\024\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\064\uffc4\001\002\000\024" +
    "\003\136\015\131\024\116\044\126\051\141\061\130\062" +
    "\127\063\133\064\106\001\002\000\006\040\252\052\276" +
    "\001\002\000\030\005\122\012\300\014\110\016\123\017" +
    "\103\020\111\023\104\024\116\053\114\055\113\064\106" +
    "\001\002\000\036\005\uffc7\010\uffc7\012\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\023\uffc7\024\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\064\uffc7\001\002\000\004\051\301\001" +
    "\002\000\024\003\136\015\131\024\116\044\126\051\141" +
    "\061\130\062\127\063\133\064\106\001\002\000\006\040" +
    "\252\052\303\001\002\000\030\005\122\012\300\014\110" +
    "\016\123\017\103\020\111\023\104\024\116\053\114\055" +
    "\113\064\106\001\002\000\004\010\305\001\002\000\030" +
    "\005\122\012\300\014\110\016\123\017\103\020\111\023" +
    "\104\024\116\053\114\055\113\064\106\001\002\000\036" +
    "\005\uffc5\010\uffc5\012\uffc5\014\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\023\uffc5\024\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\064\uffc5\001\002\000\006\024\116\064\106\001\002\000" +
    "\006\050\146\052\311\001\002\000\004\045\312\001\002" +
    "\000\036\005\uffc2\010\uffc2\012\uffc2\014\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\023\uffc2\024\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\064\uffc2\001\002\000\006\052\uffd4\064\012\001" +
    "\002\000\004\052\315\001\002\000\006\053\uffea\064\uffea" +
    "\001\002\000\006\053\317\064\012\001\002\000\032\005" +
    "\uffce\012\uffce\014\uffce\016\uffce\017\uffce\020\uffce\023\uffce" +
    "\024\uffce\053\uffce\054\uffce\055\uffce\064\uffce\001\002\000" +
    "\032\005\122\012\112\014\110\016\123\017\103\020\111" +
    "\023\104\024\116\053\114\054\321\055\113\064\106\001" +
    "\002\000\010\021\uffdc\054\uffdc\064\uffdc\001\002\000\014" +
    "\003\uffe9\006\uffe9\011\uffe9\053\uffe9\064\uffe9\001\002\000" +
    "\004\064\325\001\002\000\006\045\ufff5\047\ufff5\001\002" +
    "\000\004\060\326\001\002\000\010\061\331\062\327\063" +
    "\330\001\002\000\006\045\ufff3\047\ufff3\001\002\000\006" +
    "\045\ufff4\047\ufff4\001\002\000\006\045\ufff2\047\ufff2\001" +
    "\002\000\014\003\ufffa\006\ufffa\011\ufffa\053\ufffa\064\ufffa" +
    "\001\002\000\014\003\ufff8\006\ufff8\011\ufff8\053\ufff8\064" +
    "\ufff8\001\002\000\014\003\ufff7\006\ufff7\011\ufff7\053\ufff7" +
    "\064\ufff7\001\002\000\006\045\ufff0\047\ufff0\001\002\000" +
    "\004\064\325\001\002\000\014\003\ufffb\006\ufffb\011\ufffb" +
    "\053\ufffb\064\ufffb\001\002\000\006\045\ufff6\047\ufff6\001" +
    "\002\000\010\021\052\054\343\064\012\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\043\003\001\001\000\002\001\001\000" +
    "\004\042\006\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\014\004\012\005\013\006\017\010\014\055" +
    "\015\001\001\000\014\012\340\050\055\051\045\055\054" +
    "\056\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\044\037\045\041" +
    "\046\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\322\001\001\000\002\001\001\000\004\011\023" +
    "\001\001\000\002\001\001\000\004\055\025\001\001\000" +
    "\002\001\001\000\006\007\030\040\027\001\001\000\002" +
    "\001\001\000\010\006\033\035\032\055\015\001\001\000" +
    "\022\012\050\036\052\037\046\041\047\050\055\051\045" +
    "\055\054\056\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\037\045\041\046\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\050\061\051\045\055\054\056\053" +
    "\001\001\000\002\001\001\000\016\012\057\037\060\050" +
    "\055\051\045\055\054\056\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\050\061\051\045\055\054\056\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\065\014\067\015\070\055\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\072\055\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\077\001\001\000\006\006\033\055\015" +
    "\001\001\000\004\016\101\001\001\000\016\017\104\020" +
    "\116\026\114\027\117\052\120\053\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\052\134" +
    "\053\123\057\136\060\133\061\131\062\271\001\001\000" +
    "\002\001\001\000\012\052\231\053\123\054\233\063\232" +
    "\001\001\000\004\016\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\052\134\053\123\057\136\060\133\061\131" +
    "\062\137\001\001\000\014\052\134\053\123\057\136\060" +
    "\133\061\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\166\001\001\000\004\023\162\001\001\000" +
    "\002\001\001\000\004\024\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\052\134\053\123\057\136\060\133\061\131\062\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\147\022\151\052\134\053\123\057\136" +
    "\060\133\061\131\062\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\052\134\053\123\057\136\060\133\061" +
    "\131\062\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\134\053" +
    "\123\057\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\052\134\053\123\057\136\060\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\157\001\001" +
    "\000\002\001\001\000\022\021\173\022\151\052\134\053" +
    "\123\057\136\060\133\061\131\062\150\001\001\000\016" +
    "\052\134\053\123\057\136\060\133\061\131\062\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\162\001\001\000\016\052" +
    "\134\053\123\057\136\060\133\061\131\062\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\224\022\151\052\134\053\123\057\136" +
    "\060\133\061\131\062\150\001\001\000\016\052\134\053" +
    "\123\057\136\060\133\061\131\062\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\220\020\116\026\114\027\117\052\120" +
    "\053\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\104\020\116\026" +
    "\114\027\117\052\120\053\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\231\053\123\054\240\001\001\000\002\001\001" +
    "\000\006\052\237\053\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\030\244\031\243\032\245\052\134" +
    "\053\123\057\136\060\133\061\131\062\242\001\001\000" +
    "\004\033\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\247\052\134\053\123\057" +
    "\136\060\133\061\131\062\242\001\001\000\002\001\001" +
    "\000\016\017\254\020\116\026\253\027\117\052\120\053" +
    "\123\001\001\000\022\031\243\032\252\052\134\053\123" +
    "\057\136\060\133\061\131\062\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\116" +
    "\026\257\027\256\052\120\053\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\052\134\053\123\057\136\060\133\061\131\062" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\030\274" +
    "\031\243\032\245\052\134\053\123\057\136\060\133\061" +
    "\131\062\242\001\001\000\002\001\001\000\012\020\116" +
    "\026\276\052\120\053\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\030\301\031\243\032\245\052\134" +
    "\053\123\057\136\060\133\061\131\062\242\001\001\000" +
    "\002\001\001\000\012\020\116\026\303\052\120\053\123" +
    "\001\001\000\002\001\001\000\012\020\116\026\257\052" +
    "\120\053\123\001\001\000\002\001\001\000\006\052\307" +
    "\053\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\313\014\067\015\070\055\066" +
    "\001\001\000\002\001\001\000\004\007\315\001\001\000" +
    "\006\006\033\055\015\001\001\000\004\016\317\001\001" +
    "\000\016\017\104\020\116\026\114\027\117\052\120\053" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\050\061\051\045\055" +
    "\054\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // label ::= IDENT 
            {
              Label RESULT = null;
		int labelNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int labelNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String labelName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Label(labelName); RESULT.setLine(labelNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*label*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new Module(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new Divide(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // mulop ::= STAR 
            {
              Mulop RESULT = null;
		 RESULT=new Multiply(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new SUB_Operation(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new Add_Operation(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relop ::= LESSEQU 
            {
              Relop RESULT = null;
		 RESULT=new Rel_Operation_LESSEQU(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new Rel_Operation_LESS(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // relop ::= GREATEREQU 
            {
              Relop RESULT = null;
		 RESULT=new Rel_Operation_GREATEREQU(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new Rel_Operation_GREATER(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // relop ::= NOTEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new Rel_Operation_NOTEQUAL(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relop ::= EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new Rel_Operation_EQUAL(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignop ::= ASSIGN 
            {
              Assignop RESULT = null;
		 RESULT=new Assign_Operation(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= LPAREN expr RPAREN 
            {
              Factor RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Factor_Expr(expr); RESULT.setLine(exprleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= NEW type LPAREN actPars RPAREN 
            {
              Factor RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars pars = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Factor_New_Pars(type, pars); RESULT.setLine(typeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= NEW type LBRACKET expr RBRACKET 
            {
              Factor RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Factor_New_Array(type, expr); RESULT.setLine(typeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= BOOL 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String B1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_Bool(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= CHARACTER 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_Character(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= NUMBER 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_Number(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= designator LPAREN actPars RPAREN 
            {
              Factor RESULT = null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars a1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Factor_Designator_Pars(designator, a1); RESULT.setLine(designatorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= designator 
            {
              Factor RESULT = null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_Designator(designator); RESULT.setLine(designatorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term ::= term mulop factor 
            {
              Term RESULT = null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop m1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor factor = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term_Factors(term, m1, factor); RESULT.setLine(termleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term ::= factor 
            {
              Term RESULT = null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor factor = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term_Factor(factor); RESULT.setLine(factorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // addopTerm ::= term 
            {
              AddopTerm RESULT = null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Addop_Term(term); RESULT.setLine(termleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*addopTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // addopTerm ::= addopTerm addop term 
            {
              AddopTerm RESULT = null;
		int addopTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int addopTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		AddopTerm addopTerm = (AddopTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop a1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Addop_Terms(addopTerm, a1, term); RESULT.setLine(addopTermleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*addopTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= error 
            {
              Expr RESULT = null;
		 parser.log.debug("Uspesan oporavak od greske u izrazu za dodelu vrednosti.");  RESULT=new ExprError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= addopTerm 
            {
              Expr RESULT = null;
		int addopTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int addopTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AddopTerm addopTerm = (AddopTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PositiveExpr(addopTerm); RESULT.setLine(addopTermleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= MINUS addopTerm 
            {
              Expr RESULT = null;
		int addopTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int addopTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AddopTerm addopTerm = (AddopTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NegativeExpr(addopTerm); RESULT.setLine(addopTermleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // actParamList ::= actParamList COMMA expr 
            {
              ActParamList RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActParamList a1 = (ActParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParameters(a1, e2); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*actParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actParamList ::= expr 
            {
              ActParamList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParameter(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*actParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // actPars ::= 
            {
              ActPars RESULT = null;
		 RESULT=new ActParsDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*actPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actPars ::= actParamList 
            {
              ActPars RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParamList a1 = (ActParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Actuals(a1); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*actPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // designatorName ::= IDENT 
            {
              DesignatorName RESULT = null;
		int designatorNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String designatorName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorName(designatorName); RESULT.setLine(designatorNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*designatorName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // designator ::= THIS 
            {
              Designator RESULT = null;
		 RESULT=new Designator_THIS(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // designator ::= designatorName LBRACKET expr RBRACKET 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorName name = (DesignatorName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Designator_ArrayElem(name, expr); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // designator ::= designator DOT IDENT 
            {
              Designator RESULT = null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String designatorName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator_Dot_Ident(designator, designatorName); RESULT.setLine(designatorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // designator ::= designatorName 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorName name = (DesignatorName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator_Ident(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // designatorOpt ::= 
            {
              DesignatorOpt RESULT = null;
		 RESULT=new DesignatorOptionalNone(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*designatorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // designatorOpt ::= designator 
            {
              DesignatorOpt RESULT = null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorOptional(designator); RESULT.setLine(designatorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*designatorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // designatorList ::= designatorOpt 
            {
              DesignatorList RESULT = null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorOpt designator = (DesignatorOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator_Opt(designator); RESULT.setLine(designatorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*designatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // designatorList ::= designatorList COMMA designatorOpt 
            {
              DesignatorList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorList list = (DesignatorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorOpt designator = (DesignatorOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator_List(list, designator); RESULT.setLine(listleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*designatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // designatorStatement ::= LBRACKET designatorList RBRACKET ASSIGN designator 
            {
              DesignatorStatement RESULT = null;
		int designatorListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int designatorListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorList designatorList = (DesignatorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ArrayAssignStatement(designatorList, designator); RESULT.setLine(designatorListleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // designatorStatement ::= designator DEC 
            {
              DesignatorStatement RESULT = null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DecStatement(designator); RESULT.setLine(designatorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // designatorStatement ::= designator INC 
            {
              DesignatorStatement RESULT = null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator designator = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new IncStatement(designator); RESULT.setLine(designatorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // designatorStatement ::= designator LPAREN actPars RPAREN 
            {
              DesignatorStatement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars a2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FuncCallStatement(d1, a2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // designatorStatement ::= designator ASSIGN expr 
            {
              DesignatorStatement RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AssignStatement(d, e); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condFact ::= expr relop expr 
            {
              CondFact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop r2 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_Relop_Expr(e1, r2, e3); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*condFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condFact ::= expr 
            {
              CondFact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_Expr(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*condFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condTerm ::= condTerm AND condFact 
            {
              CondTerm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm c1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact c2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_Facts(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*condTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condTerm ::= condFact 
            {
              CondTerm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact c1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_Fact(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*condTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condition ::= condition OR condTerm 
            {
              Condition RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm c2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_Terms(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condition ::= condTerm 
            {
              Condition RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm c1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_Term(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // matched ::= designator DOT FOREACH LPAREN IDENT ARROW statement RPAREN SEMI 
            {
              Matched RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String I2 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Statement s3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ForEach_Statement(d1, I2, s3); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // matched ::= LBRACE statementList RBRACE 
            {
              Matched RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementList_Statement(s1); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // matched ::= PRINT LPAREN expr COMMA NUMBER RPAREN SEMI 
            {
              Matched RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer N2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Print_NUM_Statement(e1, N2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // matched ::= PRINT LPAREN expr RPAREN SEMI 
            {
              Matched RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Print_NONUM_Statement(expr); RESULT.setLine(exprleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // matched ::= READ LPAREN designator RPAREN SEMI 
            {
              Matched RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Read_Statement(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // matched ::= RETURN SEMI 
            {
              Matched RESULT = null;
		 RESULT=new Return_NoExpr_Statement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // matched ::= RETURN expr SEMI 
            {
              Matched RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Return_Expr_Statement(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // matched ::= CONTINUE SEMI 
            {
              Matched RESULT = null;
		 RESULT=new Continue_Statement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // matched ::= BREAK SEMI 
            {
              Matched RESULT = null;
		 RESULT=new Break_Statement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // matched ::= WHILE LPAREN condition RPAREN matched 
            {
              Matched RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched m2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new While_Statement(c1, m2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // matched ::= IF LPAREN condition RPAREN matched ELSE matched 
            {
              Matched RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched m2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched m3 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Matched_If_Statement(c1, m2, m3); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // matched ::= designatorStatement SEMI 
            {
              Matched RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement d1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatement_Statement(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unmatched ::= IF LPAREN condition RPAREN matched ELSE unmatched 
            {
              Unmatched RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched m2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int u3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int u3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched u3 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIfElse(c1, m2, u3); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unmatched ::= IF LPAREN condition RPAREN statement 
            {
              Unmatched RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIf(c1, s2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= unmatched 
            {
              Statement RESULT = null;
		int u1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int u1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched u1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmachedStmt(u1); RESULT.setLine(u1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= matched 
            {
              Statement RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched m1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStmt(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new StatementListDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*statementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statementList ::= statementList statement 
            {
              StatementList RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Statements(s1, s2); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*statementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameter ::= type IDENT LBRACKET RBRACKET 
            {
              Parameter RESULT = null;
		int paramTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int paramTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type paramType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ArrayParameter(paramType, paramName); RESULT.setLine(paramTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameter ::= type IDENT 
            {
              Parameter RESULT = null;
		int paramTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type paramType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ScalarParameter(paramType, paramName); RESULT.setLine(paramTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameterList ::= parameter 
            {
              ParameterList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Parameter p1 = (Parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameter(p1); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*parameterList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameterList ::= parameterList COMMA parameter 
            {
              ParameterList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ParameterList p1 = (ParameterList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Parameter p2 = (Parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameters(p1, p2); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*parameterList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formPars ::= 
            {
              FormPars RESULT = null;
		 RESULT=new FormParsDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*formPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formPars ::= parameterList 
            {
              FormPars RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ParameterList p1 = (ParameterList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParameters(p1); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*formPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // returnType ::= type 
            {
              ReturnType RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type typeName = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnType(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*returnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // methodTypeName ::= VOID IDENT 
            {
              MethodTypeName RESULT = null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodVoidName(methName); RESULT.setLine(methNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*methodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // methodTypeName ::= returnType IDENT 
            {
              MethodTypeName RESULT = null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ReturnType returnType = (ReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodRetTypeName(returnType, methName); RESULT.setLine(returnTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*methodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // methodDeclaration ::= methodTypeName LPAREN formPars RPAREN varDeclListSemi LBRACE statementList RBRACE 
            {
              MethodDeclaration RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodTypeName m1 = (MethodTypeName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormPars f2 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclListSemi v3 = (VarDeclListSemi)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList s4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclaration(m1, f2, v3, s4); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*methodDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // methodDeclarationList ::= methodDeclaration 
            {
              MethodDeclarationList RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclaration m1 = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Method(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*methodDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // methodDeclarationList ::= methodDeclarationList methodDeclaration 
            {
              MethodDeclarationList RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclarationList m1 = (MethodDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclaration m2 = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Methods(m1, m2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*methodDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constructorDeclaration ::= IDENT LPAREN formPars RPAREN varDeclListSemi LBRACE statementList RBRACE 
            {
              ConstructorDeclaration RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormPars f1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclListSemi v2 = (VarDeclListSemi)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstructorDeclaration(className, f1, v2, s3); RESULT.setLine(classNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*constructorDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constructorDeclarationList ::= constructorDeclaration 
            {
              ConstructorDeclarationList RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstructorDeclaration c1 = (ConstructorDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Constructor(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*constructorDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constructorDeclarationList ::= constructorDeclarationList constructorDeclaration 
            {
              ConstructorDeclarationList RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstructorDeclarationList c1 = (ConstructorDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstructorDeclaration c2 = (ConstructorDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Constructors(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*constructorDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constrMethDeclItemList ::= 
            {
              ConstrMethDeclItemList RESULT = null;
		 RESULT=new ConstrMethDeclItemListDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*constrMethDeclItemList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constrMethDeclItemList ::= constructorDeclarationList 
            {
              ConstrMethDeclItemList RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstructorDeclarationList c1 = (ConstructorDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstrMethConstrDeclItem(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*constrMethDeclItemList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constrMethDeclItemList ::= methodDeclarationList 
            {
              ConstrMethDeclItemList RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclarationList m1 = (MethodDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstrMethMethDeclItem(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*constrMethDeclItemList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // constrMethDeclItemList ::= constructorDeclarationList methodDeclarationList 
            {
              ConstrMethDeclItemList RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstructorDeclarationList c1 = (ConstructorDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclarationList m2 = (MethodDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstrMethBothItems(c1, m2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*constrMethDeclItemList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typeExtended ::= 
            {
              TypeExtended RESULT = null;
		 RESULT=new TypeExtendedDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*typeExtended*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typeExtended ::= EXTENDS type 
            {
              TypeExtended RESULT = null;
		int typeExtendedleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeExtendedright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type typeExtended = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type_Extended(typeExtended); RESULT.setLine(typeExtendedleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*typeExtended*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constrMethDecl ::= LBRACE constrMethDeclItemList RBRACE 
            {
              ConstrMethDecl RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstrMethDeclItemList c1 = (ConstrMethDeclItemList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstrMeth_Decl(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*constrMethDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classDeclItemList ::= varDeclListSemi 
            {
              ClassDeclItemList RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclListSemi v1 = (VarDeclListSemi)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassVarItem(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*classDeclItemList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classDeclItemList ::= varDeclListSemi constrMethDecl 
            {
              ClassDeclItemList RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclListSemi v1 = (VarDeclListSemi)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstrMethDecl c2 = (ConstrMethDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassBothItems(v1, c2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*classDeclItemList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classDecl ::= CLASS IDENT typeExtended LBRACE classDeclItemList RBRACE 
            {
              ClassDecl RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		TypeExtended t1 = (TypeExtended)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassDeclItemList c2 = (ClassDeclItemList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDecl(className, t1, c2); RESULT.setLine(classNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*classDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // varDeclListSemi ::= 
            {
              VarDeclListSemi RESULT = null;
		 RESULT=new VarDeclListSemiDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*varDeclListSemi*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varDeclListSemi ::= varDeclListSemi varDeclList SEMI 
            {
              VarDeclListSemi RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclListSemi v1 = (VarDeclListSemi)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList v2 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclList_Semi(v1, v2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*varDeclListSemi*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varDeclBracket ::= IDENT LBRACKET RBRACKET 
            {
              VarDeclBracket RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new VarDeclBracket(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*varDeclBracket*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varDeclNoBracket ::= IDENT 
            {
              VarDeclNoBracket RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclNoBracket(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*varDeclNoBracket*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDecl ::= varDeclBracket 
            {
              VarDecl RESULT = null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclBracket varDecl = (VarDeclBracket)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDecl_Bracket(varDecl); RESULT.setLine(varDeclleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*varDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDecl ::= varDeclNoBracket 
            {
              VarDecl RESULT = null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclNoBracket varDecl = (VarDeclNoBracket)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDecl_noBracket(varDecl); RESULT.setLine(varDeclleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*varDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varDeclList ::= type varDecl 
            {
              VarDeclList RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl varDecl = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var_dec(varType, varDecl); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varDeclList ::= varDeclList COMMA varDecl 
            {
              VarDeclList RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclList v1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl varDecl = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var_dec_list(v1, varDecl); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constDecl ::= IDENT ASSIGN BOOL 
            {
              ConstDecl RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclBool(constName, val); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*constDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constDecl ::= IDENT ASSIGN CHARACTER 
            {
              ConstDecl RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclChar(constName, val); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*constDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constDecl ::= IDENT ASSIGN NUMBER 
            {
              ConstDecl RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclNumber(constName, val); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*constDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constDeclList ::= CONST type constDecl 
            {
              ConstDeclList RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl c1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Const_dec(constType, c1); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*constDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constDeclList ::= constDeclList COMMA constDecl 
            {
              ConstDeclList RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstDeclList c1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl c2 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Const_dec_list(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*constDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_part ::= error SEMI 
            {
              Declaration_part RESULT = null;
		 parser.log.debug("Uspesan oporavak od greske pri deklaraciji do ;.");  RESULT=new ErrorDeclarationSemi(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*declaration_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_part ::= error COMMA 
            {
              Declaration_part RESULT = null;
		 parser.log.debug("Uspesan oporavak od greske pri deklaraciji do ,.");  RESULT=new ErrorDeclarationComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*declaration_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_part ::= classDecl 
            {
              Declaration_part RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl c1 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassDeclaration(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*declaration_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_part ::= varDeclList SEMI 
            {
              Declaration_part RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList v1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclarations(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*declaration_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= constDeclList SEMI 
            {
              Declaration_part RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclList c1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDeclarations(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*declaration_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= 
            {
              Declaration_list RESULT = null;
		 RESULT=new Declaration_listDerived1(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= declaration_list declaration_part 
            {
              Declaration_list RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Declaration_list d1 = (Declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Declaration_part d2 = (Declaration_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Declarations(d1, d2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // progName ::= IDENT 
            {
              ProgName RESULT = null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgName(pName); RESULT.setLine(pNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*progName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROG progName declaration_list LBRACE RBRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ProgName p = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Declaration_list d1 = (Declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ProgramNoMethods(p, d1); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROG progName declaration_list LBRACE methodDeclarationList RBRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgName p = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Declaration_list d1 = (Declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclarationList m2 = (MethodDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ProgramMethods(p, d1, m2); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

